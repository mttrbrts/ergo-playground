let examples =[
  {
    'name': 'AcceptanceOfDelivery',
    'ergo': '\nnamespace org.accordproject.acceptanceofdelivery\nimport org.accordproject.common.*\nimport org.accordproject.acceptanceofdelivery.*\ncontract AcceptanceOfDelivery over TemplateModel {\n  clause acceptanceofdelivery(request : InspectDeliverable) : InspectionResponse throws Error {\n    define variable received = request.deliverableReceivedAt;\n    enforce momentIsBefore(received,now()) else\n      throw new Error{ error : "Transaction time is before the deliverable date." }\n    ;\n    define variable status =\n      if momentIsAfter(now(), momentAdd(received, momentDuration(contract.businessDays, "day")))\n      then "OUTSIDE_INSPECTION_PERIOD"\n      else if request.inspectionPassed\n      then "PASSED_TESTING"\n      else "FAILED_TESTING"\n    ;\n    return new InspectionResponse{\n      status : status,\n      shipper : contract.shipper,   // This should be a relationship\n      receiver : contract.receiver  // This should be a relationship\n    }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.acceptanceofdelivery\nimport org.hyperledger.composer.system.*\n\ntransaction InspectDeliverable {\n  o DateTime deliverableReceivedAt\n  o Boolean inspectionPassed\n}\n\nenum InspectionStatus {\n  o PASSED_TESTING\n  o FAILED_TESTING\n  o OUTSIDE_INSPECTION_PERIOD\n}\n\ntransaction InspectionResponse {\n  o InspectionStatus status\n  --> Participant shipper\n  --> Participant receiver\n}\n\n@AccordTemplateModel("acceptance-of-delivery")\nconcept TemplateModel {\n  \n  --> Participant shipper\n  \n  --> Participant receiver\n  \n  o String deliverable\n  \n  o Long businessDays\n  \n  o String attachment\n}'
      ],
    'contract': '{"$class":"org.accordproject.acceptanceofdelivery.TemplateModel","shipper":"Party A","receiver":"Party B","deliverable":"Widgets","businessDays":10,"attachment":"Attachment X"}',
    'grammar': 'Acceptance of Delivery. [{shipper}] will be deemed to have completed its delivery obligations if in [{receiver}]\'s opinion, the [{deliverable}] satisfies the Acceptance Criteria, and [{receiver}] notifies [{shipper}] in writing that it is accepting the [{deliverable}].\nInspection and Notice. [{receiver}] will have [{businessDays}] Business Days\' to inspect and evaluate the [{deliverable}] on the delivery date before notifying [{shipper}] that it is either accepting or rejecting the [{deliverable}].\nAcceptance Criteria. The "Acceptance Criteria" are the specifications the [{deliverable}] must meet for the [{shipper}] to comply with its requirements and obligations under this agreement, detailed in [{attachment}], attached to this agreement.',
    'request': '{\n    "$class":"org.accordproject.acceptanceofdelivery.InspectDeliverable",\n    "deliverableReceivedAt": "January 1, 2018 16:34:00",\n    "inspectionPassed": true\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'AcceptanceOfDelivery'
  },
  {
    'name': 'CopyrightLicense',
    'ergo': '\nnamespace org.accordproject.copyrightlicense\nimport org.accordproject.copyrightlicense.*\ncontract CopyrightLicense over TemplateModel {\n   // Clause for volume discount\n  clause paymentClause(request : PaymentRequest) : PayOut {\n	  return new PayOut{ amount: clause.amount }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.copyrightlicense\nimport org.accordproject.common.ClauseModel\n\ntransaction PaymentRequest {\n}\n\ntransaction PayOut {\n  o Double amount\n}\n\n@AccordTemplateModel("copyright-license")\nconcept TemplateModel {\n  \n  o DateTime effectiveDate\n  \n  o String licenseeName\n  o String licenseeState\n  o String licenseeEntityType\n  o String licenseeAddress\n  \n  o String licensorName\n  o String licensorState\n  o String licensorEntityType\n  o String licensorAddress\n  \n  o String territory\n  \n  o String purposeDescription\n  o String workDescription\n  \n  o PaymentClauseModel paymentClause\n}\nasset PaymentClauseModel extends ClauseModel {\n  o String amountText\n	o Double amount\n	o String paymentProcedure\n}'
      ],
    'contract': '{"$class":"org.accordproject.copyrightlicense.TemplateModel","effectiveDate":"2018-01-01","licenseeName":"Me","licenseeState":"NY","licenseeEntityType":"Company","licenseeAddress":"1 Broadway","licensorName":"Myself","licensorState":"NY","licensorEntityType":"Company","licensorAddress":"2 Broadway","territory":"United States","purposeDescription":"stuff","workDescription":"other stuff","paymentClause":{"$class":"org.accordproject.copyrightlicense.PaymentClauseModel","clauseId":"e6f2f092-2c24-4a69-9c60-85d977429a56","amountText":"one hundred","amount":100,"paymentProcedure":"bank transfer"}}',
    'grammar': 'Copyright License Agreement\nThis COPYRIGHT LICENSE AGREEMENT (the "Agreement"), dated as of [{effectiveDate}] (the "Effective Date"), is made by and between [{licenseeName}] ("Licensee"), a [{licenseeState}] [{licenseeEntityType}] with offices located at [{licenseeAddress}], and [{licensorName}] ("Licensor"), a [{licensorState}] [{licensorEntityType}] with offices located at [{licensorAddress}].\nWHEREAS, Licensor solely and exclusively owns or controls the Work (as defined below) and wishes to grant to Licensee a license to the Work, and Licensee wishes to obtain a license to the Work for the uses and purposes described herein, each subject to the terms and conditions set forth herein.\nNOW, THEREFORE, in consideration of the mutual covenants, terms, and conditions set forth herein, and for other good and valuable consideration, the receipt and sufficiency of which are hereby acknowledged, the parties agree as follows:\n1. License.\n1.1. Grant of Rights. Subject to the terms and conditions of this Agreement, Licensor hereby grants to Licensee and its affiliates during the Term (as defined below) an exclusive, transferable right and license in the [{territory}] (the "Territory"), to reproduce, publicly perform, display, transmit, and distribute the Work, including translate, alter, modify, and create derivative works of the Work, through all media now known or hereinafter developed for purposes of [{purposeDescription}]. The "Work" is defined as [{workDescription}].\n1.2. Permissions. Licensor has obtained from all persons and entities who are, or whose trademark or other property is, identified, depicted, or otherwise referred to in the Work, such written and signed licenses, permissions, waivers, and consents (collectively, "Permissions" and each, individually, a "Permission"), including those relating to publicity, privacy, and any intellectual property rights, as are or reasonably may be expected to be necessary for Licensee to exercise its rights in the Work as permitted under this Agreement, without incurring any payment or other obligation to, or otherwise violating any right of, any such person or entity.\n2. Copyright Notices. Licensee shall ensure that its use of the Work is marked with the appropriate copyright notices specified by Licensor in a reasonably prominent position in the order and manner provided by Licensor. Licensee shall abide by the copyright laws and what are considered to be sound practices for copyright notice provisions in the Territory. Licensee shall not use any copyright notices that conflict with, confuse, or negate the notices Licensor provides and requires hereunder.\n3. [{#paymentClause}]Payment. As consideration in full for the rights granted herein, Licensee shall pay Licensor a one-time fee in the amount of [{amountText}] US Dollars (US $[{amount}]) upon execution of this Agreement, payable as follows: [{paymentProcedure}]. [{/paymentClause}] \n4. General.\n4.1. Interpretation. For purposes of this Agreement, (a) the words "include," "includes," and "including" are deemed to be followed by the words "without limitation"; (b) the word "or" is not exclusive; and (c) the words "herein," "hereof," "hereby," "hereto," and "hereunder" refer to this Agreement as a whole. This Agreement is intended to be construed without regard to any presumption or rule requiring construction or interpretation against the party drafting an instrument or causing any instrument to be drafted.\n4.2. Entire Agreement. This Agreement, including and together with any related attachments, constitutes the sole and entire agreement of the parties with respect to the subject matter contained herein, and supersedes all prior and contemporaneous understandings, agreements, representations, and warranties, both written and oral, with respect to such subject matter. \n4.3. Severability. If any term or provision of this Agreement is invalid, illegal, or unenforceable in any jurisdiction, such invalidity, illegality, or unenforceability will not affect the enforceability of any other term or provision of this Agreement, or invalidate or render unenforceable such term or provision in any other jurisdiction. [Upon a determination that any term or provision is invalid, illegal, or unenforceable, [the parties shall negotiate in good faith to/the court may] modify this Agreement to effect the original intent of the parties as closely as possible in order that the transactions contemplated hereby be consummated as originally contemplated to the greatest extent possible.]\n4.4. Assignment. Licensee may freely assign or otherwise transfer all or any of its rights, or delegate or otherwise transfer all or any of its obligations or performance, under this Agreement without Licensor\'s consent. This Agreement is binding upon and inures to the benefit of the parties hereto and their respective permitted successors and assigns.\n',
    'request': '{\n    "$class":"org.accordproject.copyrightlicense.PaymentRequest"\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'CopyrightLicense'
  },
  {
    'name': 'DemandForecast',
    'ergo': '\nnamespace org.accordproject.demandforecast\nimport org.accordproject.demandforecast.*\ndefine function isLastDayOfQuarter(timestamp : DateTime) : Boolean {\n    // Keep always true for testing\n    return true\n}\ncontract DemandForecast over TemplateModel {\n	clause demandforecast(request : ForecastRequest) : BindingResponse {\n//    enforce momentIsBefore(contract.effectiveDate,now())\n//		else throw new Error{ message: "Forecast was received before the effective date" };\n    enforce isLastDayOfQuarter(now())\n		else throw new Error{ message: "Forecast was not received on last day of quarter" };\n    \n	  return new BindingResponse{\n			requiredPurchase : request.supplyForecast * (contract.minimumPercentage / 100.0),\n			year : momentYear(now()),\n			quarter : momentQuarter(now())\n		}\n	}\n}\n',
    'models':  [
      'namespace org.accordproject.demandforecast\n@AccordTemplateModel("demandforecast")\nconcept TemplateModel {\n  o String purchaser\n  o String supplier \n  o DateTime effectiveDate\n  o Double minimumPercentage\n}\n\ntransaction ForecastRequest {\n  o Integer supplyForecast\n}\ntransaction BindingResponse {\n  o Double requiredPurchase\n  o Integer year\n  o Integer quarter\n}\n'
      ],
    'contract': '{"$class":"org.accordproject.demandforecast.TemplateModel","purchaser":"PETER","supplier":"DAN","effectiveDate":"2018-04-02","minimumPercentage":85}',
    'grammar': 'On or before the [{effectiveDate}], and thereafter on or before the last day of each calendar quarter, the Purchaser [{purchaser}] shall send the Supplier [{supplier}] a Supply Forecast. The Supply Forecast will be a binding commitment on the Purchaser’s behalf to purchase during the first quarter included in each Supply Forecast at least [{minimumPercentage}]% of the quantity of the listed Product.\n',
    'request': '{\n    "$class": "org.accordproject.demandforecast.ForecastRequest",\n    "supplyForecast": 1200.0\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'DemandForecast'
  },
  {
    'name': 'HelloWorld',
    'ergo': '\nnamespace org.accordproject.helloworld\ncontract HelloWorld over TemplateModel {\n  // Simple Clause\n  clause helloworld(request : Request) : Response {\n    return new Response{ output: "Hello " ++ contract.name ++ " " ++ request.input }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.helloworld\ntransaction Request {\n  o String input\n}\ntransaction Response {\n  o String output\n}\n\n@AccordTemplateModel("helloworld")\nconcept TemplateModel {\n  \n  o String name\n}\n// this is a change!'
      ],
    'contract': '{"$class":"org.accordproject.helloworld.TemplateModel","name":"Fred Blogs"}',
    'grammar': 'Name of the person to greet: [{name}].\nThank you!',
    'request': '{\n    "$class": "org.accordproject.helloworld.Request",\n    "input": "Accord Project"\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'HelloWorld'
  },
  {
    'name': 'HelloWorldState',
    'ergo': '\nnamespace org.accordproject.helloworldstate\nimport org.accordproject.helloworldstate.*\ncontract HelloWorldState over TemplateModel {\n  // Simple Clause\n  clause helloworldstate(request : Request) : Response {\n		set state new HelloWorldState{\n			stateId: "org.accordproject.helloworldstate.HelloWorldState#" ++ state.counter,\n			counter: state.counter + 1.0\n		};\n    return new Response{\n			output: "Hello " ++ contract.name ++ " " ++ request.input ++ "(" ++ state.counter ++ ")"\n		}\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.helloworldstate\nimport org.accordproject.common.*\ntransaction Request {\n  o String input\n}\ntransaction Response {\n  o String output\n}\nasset HelloWorldState extends ContractState {\n  o Double counter\n}\n\n@AccordTemplateModel("helloworldstate")\nconcept TemplateModel {\n  \n  o String name\n}\n// this is a change!'
      ],
    'contract': '{"$class":"org.accordproject.helloworldstate.TemplateModel","name":"Fred Blogs"}',
    'grammar': 'Name of the person to greet: [{name}].\nThank you!',
    'request': '{\n    "$class": "org.accordproject.helloworldstate.Request",\n    "input": "Accord Project"\n}\n',
    'state': '{\n    "$class": "org.accordproject.helloworldstate.HelloWorldState",\n    "stateId": "org.accordproject.helloworldstate.HelloWorldState#0",\n		"counter" : 0\n}\n',
    'contractname': 'HelloWorldState'
  },
  {
    'name': 'InstallmentSale',
    'ergo': '\nnamespace org.accordproject.installmentsale\ncontract InstallmentSale over TemplateModel {\n  clause PayInstallment(request : Installment) : Balance {\n    enforce (state.status = "WaitingForFirstDayOfNextMonth"); // Make sure this is only called in the right state\n    enforce (contract.MIN_PAYMENT <= state.balance_remaining) and (state.next_payment_month < 23);\n    enforce (contract.MIN_PAYMENT <= request.amount); // Underpaying is forbidden\n    enforce (request.amount <= state.balance_remaining); // overpaying is forbidden. this is NOT checked statically.\n    define variable before_interest = state.balance_remaining - request.amount;\n    define variable balance = before_interest * (1.0 + contract.INTEREST_RATE/100.00);\n		define variable total_paid = state.total_paid + request.amount;\n    set state new InstallmentSaleState{\n			stateId: "1",\n      status: "WaitingForFirstDayOfNextMonth",\n      balance_remaining: balance,\n			total_paid: total_paid,\n      next_payment_month: state.next_payment_month + 1.0\n    };\n		emit new PaymentObligation{\n			from: contract.BUYER,\n			to: contract.SELLER,\n			amount: request.amount\n		};\n    return new Balance{\n      balance: balance,\n			total_paid: total_paid\n    }\n  }\n  clause PayLastInstallment(request : ClosingPayment) : Balance {\n    enforce (request.amount = state.balance_remaining + contract.DUE_AT_CLOSING);\n    define variable balance = state.balance_remaining + contract.DUE_AT_CLOSING - request.amount;\n		define variable total_paid = state.total_paid + request.amount;\n    set state new InstallmentSaleState{\n			stateId: "1",\n      status: "Fulfilled",\n      balance_remaining: balance,\n			total_paid: total_paid,\n      next_payment_month: 0.0 // ???\n    };\n		emit new PaymentObligation{\n			from: contract.BUYER,\n			to: contract.SELLER,\n			amount: request.amount\n		};\n    return new Balance{\n      balance: balance,\n			total_paid: total_paid\n    }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.installmentsale\nimport org.accordproject.common.*\ntransaction Installment {\n  o Double amount\n}\ntransaction ClosingPayment {\n  o Double amount\n}\ntransaction Balance {\n  o Double balance\n	o Double total_paid\n}\nenum ContractStatus {\n  o WaitingForFirstDayOfNextMonth\n  o Fulfilled\n}\nasset InstallmentSaleState extends ContractState {\n  o ContractStatus status\n  o Double balance_remaining\n  o Integer next_payment_month\n	o Double total_paid\n}\nevent PaymentObligation {\n  o String from\n	o String to\n	o Double amount\n}\n\n@AccordTemplateModel("installment-sale")\nconcept TemplateModel {\n  o String BUYER\n	o String SELLER\n  o Double INITIAL_DUE\n  o Double INTEREST_RATE\n  o Double TOTAL_DUE_BEFORE_CLOSING\n  o Double MIN_PAYMENT\n  o Double DUE_AT_CLOSING\n}\n'
      ],
    'contract': '{"$class":"org.accordproject.installmentsale.TemplateModel","BUYER":"Dan","SELLER":"Ned","INITIAL_DUE":10000,"INTEREST_RATE":1.5,"TOTAL_DUE_BEFORE_CLOSING":9500,"MIN_PAYMENT":500,"DUE_AT_CLOSING":500}',
    'grammar': '[{BUYER}] agrees to pay to [{SELLER}] the total sum e[{INITIAL_DUE}], in the manner following:\nE[{DUE_AT_CLOSING}] is to be paid at closing, and the remaining balance of E[{TOTAL_DUE_BEFORE_CLOSING}] shall be paid as follows:\nE[{MIN_PAYMENT}] or more per month on the first day of each and every month, and continuing until the entire balance, including both principal and interest, shall be paid in full -- provided, however, that the entire balance due plus accrued interest and any other amounts due here-under shall be paid in full on or before 24 months.\nMonthly payments shall include both principal and interest with interest at the rate of [{INTEREST_RATE}]%, computed monthly on the remaining balance from time to time unpaid.\n',
    'request': '{\n    "$class": "org.accordproject.installmentsale.Installment",\n    "amount": 2500.00\n}',
    'state': '{ "$class": "org.accordproject.installmentsale.InstallmentSaleState",\n  "stateId" : "org.accordproject.installmentsale.InstallmentSaleState#1",\n  "status" : "WaitingForFirstDayOfNextMonth",\n  "balance_remaining" : 10000.00,\n	"total_paid" : 0.00,\n  "next_payment_month" : 3 }\n',
    'contractname': 'InstallmentSale'
  },
  {
    'name': 'LateDeliveryAndPenalty',
    'ergo': '\nnamespace org.accordproject.latedeliveryandpenalty\nimport org.accordproject.common.*\nimport org.accordproject.latedeliveryandpenalty.*\n// Declare a contract over a template model\ncontract LateDeliveryAndPenalty over TemplateModel {\n  // Clause checking for late delivery and calculating penalty\n  clause latedeliveryandpenalty(request : LateDeliveryAndPenaltyRequest) : LateDeliveryAndPenaltyResponse throws Error {\n    // Guard against calling late delivery clause too early\n    define variable agreed = request.agreedDelivery;\n    enforce momentIsBefore(agreed,now()) else\n    throw new Error{ message : "Cannot exercise late delivery before delivery date" }\n    ;\n    // Guard against force majeure\n    enforce !contract.forceMajeure or !request.forceMajeure else\n    return new LateDeliveryAndPenaltyResponse{\n      penalty: 0.0,\n      buyerMayTerminate: true\n    }\n    ;\n    // Calculate the time difference between current date and agreed upon date\n    define variable diff = momentDiff(now,agreed);\n    // Penalty formula\n    define variable penalty =\n      (diff / contract.penaltyDuration.amount) * contract.penaltyPercentage/100.0 * request.goodsValue;\n    // Penalty may be capped\n    define variable capped = min([penalty, contract.capPercentage/100.0 * request.goodsValue]);\n    // Return the response with the penalty and termination determination\n    return new LateDeliveryAndPenaltyResponse{\n      penalty: capped,\n      buyerMayTerminate: diff > contract.termination.amount\n    }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.base\n\nenum TemporalUnit {\n  o SECOND\n  o MINUTE\n  o HOUR\n  o DAY\n  o WEEK\n  o YEAR\n}\n\nconcept Duration {\n  o Long amount\n  o TemporalUnit unit\n}',
      'namespace org.accordproject.latedeliveryandpenalty\nimport org.accordproject.base.*\n\n@AccordTemplateModel("latedeliveryandpenalty")\nconcept TemplateModel {\n  \n  o Boolean forceMajeure optional\n  \n  o Duration penaltyDuration\n  \n  o Double penaltyPercentage\n  \n  o Double capPercentage\n  \n  o Duration termination\n  \n  o TemporalUnit fractionalPart\n}\n\ntransaction LateDeliveryAndPenaltyRequest {\n  \n  o Boolean forceMajeure\n  \n  o DateTime agreedDelivery\n  \n  o DateTime deliveredAt optional\n  \n  o Double goodsValue\n}\n\ntransaction LateDeliveryAndPenaltyResponse {\n  \n  o Double penalty\n  \n  o Boolean buyerMayTerminate\n}'
      ],
    'contract': '{"$class":"org.accordproject.latedeliveryandpenalty.TemplateModel","forceMajeure":true,"penaltyDuration":{"$class":"org.accordproject.base.Duration","amount":2,"unit":"DAY"},"penaltyPercentage":10.5,"capPercentage":55,"termination":{"$class":"org.accordproject.base.Duration","amount":15,"unit":"DAY"},"fractionalPart":"DAY"}',
    'grammar': 'Late Delivery and Penalty. In case of delayed delivery[{" except for Force Majeure cases,":? forceMajeure}] the Seller shall pay to the Buyer for every [{penaltyDuration}] of delay penalty amounting to [{penaltyPercentage}]% of the total value of the Equipment whose delivery has been delayed. Any fractional part of a [{fractionalPart}] is to be considered a full [{fractionalPart}]. The total amount of penalty shall not however, exceed [{capPercentage}]% of the total value of the Equipment involved in late delivery. If the delay is more than [{termination}], the Buyer is entitled to terminate this Contract.',
    'request': '{\n    "$class": "org.accordproject.latedeliveryandpenalty.LateDeliveryAndPenaltyRequest",\n    "forceMajeure": false,\n    "agreedDelivery": "December 17, 2017 03:24:00",\n    "deliveredAt": null,\n    "goodsValue": 200.00\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'LateDeliveryAndPenalty'
  },
  {
    'name': 'PerishableGoods',
    'ergo': '\nnamespace org.accordproject.perishablegoods\nimport org.accordproject.common.*\nimport org.accordproject.perishablegoods.*\n// Auxiliary function calculating penalty from temperature readings\ndefine function calculateTempPenalty(minTemperature : Double,\n                                     maxTemperature : Double,\n                                     penaltyFactor : Double,\n                                     readings : sensorReading[]) : Double {\n  define variable tempReadings = foreach x in readings return x.centigrade;\n  // find the lowest temperature reading\n  define variable lowestReading = min(tempReadings);\n  // find the highest temperature reading\n  define variable highestReading = max(tempReadings);\n  if lowestReading < minTemperature\n  then return (minTemperature - lowestReading) * penaltyFactor\n  else if highestReading > maxTemperature\n  then return (highestReading - maxTemperature) * penaltyFactor\n  else return 0.0\n}\n// Auxiliary function calculating penalty from humidity readings\ndefine function calculateHumPenalty(minHumidity : Double,\n                                    maxHumidity : Double,\n                                    penaltyFactor : Double,\n                                    readings : sensorReading[]) : Double {\n  define variable humReadings = foreach x in readings return x.humidity;\n  // find the lowest humidity reading\n  define variable lowestReading = min(humReadings);\n  // find the highest temperature reading\n  define variable highestReading = max(humReadings);\n  if lowestReading < minHumidity\n  then return (minHumidity - lowestReading) * penaltyFactor\n  else if highestReading > maxHumidity\n  then return (highestReading - maxHumidity) * penaltyFactor\n  else return 0.0\n}\ncontract PerishableGoods over TemplateModel {\n  clause payout(request : ShipmentReceived) : PriceCalculation throws Error {\n    // Guard against unitCount outside the bounds specified in the clause\n    //enforce request.unitCount < contract.minUnits or request.unitCount > contract.maxUnits\n    //else throw new Error{ message : "Units received out of range for the contract." };\n    // Guard against requests for payout after the dueDate\n    enforce momentIsBefore(now(),contract.dueDate)\n    else return new PriceCalculation{\n      shipment : request.shipment,\n			totalPrice : 0.0,\n			penalty : 0.0,\n			late : true\n    };\n    // Guard against missing temperature readings\n    enforce count(request.shipment.sensorReadings) > 0.0\n    else throw new Error{ message : "No temperature readings received."};\n    // Calculates payout\n    define variable payOut = contract.unitPrice * request.unitCount;\n    // Calculates penalty if any\n    define variable penalty =\n      calculateTempPenalty(contract.minTemperature,\n                           contract.maxTemperature,\n                           contract.penaltyFactor,\n                           request.shipment.sensorReadings)\n    + calculateHumPenalty(contract.minHumidity,\n                          contract.maxHumidity,\n                          contract.penaltyFactor,\n                          request.shipment.sensorReadings);\n    // Returns a Price calculation, applying any penalities\n    define variable totalPenalty = penalty * request.unitCount;\n    return new PriceCalculation{\n      shipment : request.shipment,\n      totalPrice : max([payOut - totalPenalty, 0.0]),\n      penalty : totalPenalty,\n      late : false\n    }\n  }\n}\n',
    'models':  [
      '\nnamespace org.accordproject.perishablegoods\n\nenum ShipmentStatus {\n  o CREATED\n  o IN_TRANSIT\n  o ARRIVED\n}\nenum Unit {\n  o KG\n  o BUSHEL\n  o TONNE\n  o BARREL\n  o CORD\n}\nenum Duration {\n  o WEEK\n  o HOUR\n  o DAY\n  o MONTH\n  o YEAR\n  o MINUTE\n}\n\nabstract transaction ShipmentTransaction {\n    --> Shipment shipment\n}\n\ntransaction SensorReading extends ShipmentTransaction {\n  o Double centigrade\n  o Double humidity\n}\n\ntransaction ShipmentReceived extends ShipmentTransaction {\n    o Integer unitCount\n}\n\ntransaction PriceCalculation extends ShipmentTransaction {\n  o Double totalPrice\n  o Double penalty\n  o Boolean late\n}\n\nasset Shipment identified by shipmentId {\n  o String shipmentId\n  o ShipmentStatus status\n  --> Grower grower\n  --> Importer importer\n  o SensorReading[] sensorReadings optional\n  \n  o String smartClause\n}\n\nconcept Address {\n  o String city optional\n  o String country\n  o String street optional\n  o String zip optional\n}\n\nabstract participant Business identified by email {\n  o String email\n  o Address address\n  o Double accountBalance\n}\n\nparticipant Grower extends Business {\n}\n\nparticipant Shipper extends Business {\n}\n\nparticipant Importer extends Business {\n}\n\ntransaction SetupDemo {\n}'
      ],
    'contract': '{"$class":"org.accordproject.perishablegoods.contract.TemplateModel","grower":"PETER","importer":"DAN","shipment":"SHIP_001","dueDate":"2018-06-02","unitPrice":1.5,"unit":"KG","minUnits":3000,"maxUnits":3500,"product":"Grade I, Size 4, Zutano Mexican Avocados","sensorReadingFrequency":1,"duration":"HOUR","minTemperature":2,"maxTemperature":13,"minHumidity":70,"maxHumidity":90,"penaltyFactor":0.2}',
    'grammar': 'On receipt of the shipment [{shipment}] the importer [{importer}] pays the grower [{grower}] [{unitPrice}] USD per [{unit}]. The shipment must contain between [{minUnits}] and [{maxUnits}] [{unit}] of [{product}].\nShipping containers used must be temperature and humidity controlled, and sensor readings must be logged at least [{sensorReadingFrequency}] per [{duration}].\nShipments that arrive after [{dueDate}] are to be considered spoiled and must be arranged to be returned to or disposed of by grower at cost to grower.\nTemperature readings for the shipment must be between [{minTemperature}] and [{maxTemperature}].\nHumidity readings for the shipment must be between [{minHumidity}] and [{maxHumidity}].\nShipments that have a temperature or humidity reading outside the agreed range have a price penalty applied calculated using the Formula for Breach Penalty Calculation below. The breach penalty factor to be used is [{penaltyFactor}].\nFormula for Breach Penalty Calculation:\n   penalty = number of shipment units x difference between sensor reading and agreed range x breach penalty factor\n',
    'request': '{\n    "$class":"org.accordproject.perishablegoods.ShipmentReceived",\n    "unitCount":3000,\n    "shipment":{\n        "$class":"org.accordproject.perishablegoods.Shipment",\n        "shipmentId":"SHIP_001",\n        "sensorReadings":[\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":2,\n                "humidity":80,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"a"\n            },\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":5,\n                "humidity":90,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"b"\n            },\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":15,\n                "humidity":65,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"c"\n            }\n        ]\n    },\n    "transactionId":"99c64b8a-b3b0-408a-8ec4-7820776cd447",\n    "timestamp":"2018-02-18T11:11:41.264Z"\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'PerishableGoods'
  },
  {
    'name': 'SupplyAgreementPerishableGoods',
    'ergo': 'namespace org.accordproject.perishablegoods\nimport org.accordproject.contract.*\nimport org.accordproject.perishablegoods.*\n// Auxiliary function calculating penalty from temperature readings\ndefine function calculateTempPenalty(minTemperature : Double,\n                                     maxTemperature : Double,\n                                     penaltyFactor : Double,\n                                     readings : sensorReading[]) : Double {\n  define variable tempReadings = foreach x in readings return x.centigrade;\n  // find the lowest temperature reading\n  define variable lowestReading = min(tempReadings);\n  // find the highest temperature reading\n  define variable highestReading = max(tempReadings);\n  if lowestReading < minTemperature  then \n    return (minTemperature - lowestReading) * penaltyFactor\n  else if highestReading > maxTemperature then \n    return (highestReading - maxTemperature) * penaltyFactor\n  else \n    return 0.0\n}\n// Auxiliary function calculating penalty from humidity readings\ndefine function calculateHumPenalty(minHumidity : Double,\n                                    maxHumidity : Double,\n                                    penaltyFactor : Double,\n                                    readings : sensorReading[]) : Double {\n  define variable humReadings = foreach x in readings return x.humidity;\n  // find the lowest humidity reading\n  define variable lowestReading = min(humReadings);\n  // find the highest temperature reading\n  define variable highestReading = max(humReadings);\n  if lowestReading < minHumidity then \n    return (minHumidity - lowestReading) * penaltyFactor\n  else if highestReading > maxHumidity then \n    return (highestReading - maxHumidity) * penaltyFactor\n  else \n    return 0.0\n}\ncontract SupplyAgreement over TemplateModel {\n  clause perishableGoods(request : ShipmentReceived) : PriceCalculation throws Error {\n    // Guard against unitCount outside the bounds specified in the clause\n    enforce (request.unitCount >= contract.minUnits) and (request.unitCount <= contract.maxUnits)\n    else throw "Units received out of range for the contract.";\n    \n    // Guard against missing temperature readings\n    enforce count(request.shipment.sensorReadings) > 0.0\n    else throw "No temperature readings received.";\n    // // Guard against requests for payout after the dueDate\n    enforce momentIsBefore(now(), contract.dueDate)\n    else return new PriceCalculation{\n      shipment : request.shipment,\n			totalPrice : 0.0,\n			penalty : 0.0,\n			late : true\n    };\n    // Calculates payout\n    define variable payOut = contract.unitPrice * request.unitCount;\n    // Calculates penalty if any\n    define variable penalty =\n      calculateTempPenalty(contract.minTemperature,\n                           contract.maxTemperature,\n                           contract.penaltyFactor,\n                           request.shipment.sensorReadings)\n      + calculateHumPenalty(contract.minHumidity,\n                          contract.maxHumidity,\n                          contract.penaltyFactor,\n                          request.shipment.sensorReadings);\n    // Returns a Price calculation, applying any penalities\n    define variable totalPenalty = penalty * request.unitCount;\n    return new PriceCalculation{\n      shipment : request.shipment,\n      totalPrice : max([payOut - totalPenalty, 0.0]),\n      penalty : totalPenalty,\n      late : false\n    }\n  }\n}\n',
    'models':  [
      '\nnamespace org.accordproject.perishablegoods\n\nenum ShipmentStatus {\n  o CREATED\n  o IN_TRANSIT\n  o ARRIVED\n}\nenum Unit {\n  o KG\n  o BUSHEL\n  o TONNE\n  o BARREL\n  o CORD\n}\nenum Duration {\n  o WEEK\n  o HOUR\n  o DAY\n  o MONTH\n  o YEAR\n  o MINUTE\n}\n\nabstract transaction ShipmentTransaction {\n    --> Shipment shipment\n}\n\ntransaction SensorReading extends ShipmentTransaction {\n  o Double centigrade\n  o Double humidity\n}\n\ntransaction ShipmentReceived extends ShipmentTransaction {\n    o Integer unitCount\n}\n\ntransaction PriceCalculation extends ShipmentTransaction {\n  o Double totalPrice\n  o Double penalty\n  o Boolean late\n}\n\nasset Shipment identified by shipmentId {\n  o String shipmentId\n  o ShipmentStatus status\n  --> Grower grower\n  --> Importer importer\n  o SensorReading[] sensorReadings optional\n  \n  o String smartClause\n}\n\nconcept Address {\n  o String city optional\n  o String country\n  o String street optional\n  o String zip optional\n}\n\nabstract participant Business identified by email {\n  o String email\n  o Address address\n  o Double accountBalance\n}\n\nparticipant Grower extends Business {\n}\n\nparticipant Shipper extends Business {\n}\n\nparticipant Importer extends Business {\n}\n\ntransaction SetupDemo {\n}'
      ],
    'contract': '{"$class":"org.accordproject.perishablegoods.contract.TemplateModel","grower":"SUPPLIER CORPORATION","importer":"BUYER CORPORATION","shipment":"SHIP_001","dueDate":"2018-05-25","unitPrice":1.5,"unit":"KG","minUnits":2995,"maxUnits":3005,"product":"Grade I, Size 4, Zutano Mexican Avocados","sensorReadingFrequency":1,"duration":"HOUR","minTemperature":2,"maxTemperature":13,"minHumidity":70,"maxHumidity":90,"penaltyFactor":0.2}',
    'grammar': 'Supply Agreement\nThis SUPPLY AGREEMENT (together with all schedules attached hereto, the “Agreement”) is entered into as of [{dueDate}] (the “Execution Date”) between [{grower}], a Delaware corporation (“Supplier”), having a principal place of business at 12345 Main Street, California 92705, and [{importer}], a company organized and existing under the laws of Delaware (“Purchaser”), with a place of business at 12345 Second Avenue, New York, NY 10001.\n1. Supply and Purchase of Products. The Supplier shall supply and the Purchaser shall purchase [{product}] (the "Products", [{shipment}]) in accordance with the terms of this agreement.\n2. Orders\n2.1. Purchase Orders. The Purchaser shall submit all orders for Products to the Supplier in writing to the Supplier\'s address listed in the introduction to this agreement, or as the Supplier otherwise specifies in writing, (each a "Purchase Order") and include in each Purchase Order\n(a) each Product it is ordering, identified by model or part number,\n(b) the amount of each Product it is ordering,\n(c) the unit price of each Product it is ordering,\n(d) the location for delivery, and\n(e) the delivery date, allowing reasonable time for the Supplier to receive, review, process the Purchase Order, and ship the Products (the "Delivery Date").\n2.2. Accepting, Modifying, and Rejecting Purchase Orders\n(a) By Notice. Within 2 Business Days\' of receiving a Purchase Order from the Purchaser, the Supplier shall accept, reject, or propose a modification to the Purchase Order by sending the Purchaser written notice of its acceptance, rejection, or proposed modification.\n(b) Deemed Acceptance. If the Supplier fails to notify the Purchaser of its acceptance, rejection, or proposed modification, the Purchaser may deem that the Supplier accepted the Purchase Order.\n(c) Modification of Purchase Order. The Supplier may propose a modification to a Purchase Order by including in its notice to the Purchaser a modified Purchase Order for the Purchaser to accept or reject according to the acceptance and rejection procedures under paragraphs 2.2(a) and 2.2(b).\n2.3. Canceling Purchase Orders. The Purchaser may, at no expense to itself, cancel part or all of a Purchase Order up to 10 Business Days before the Delivery Date.\n3. Delivery. The Supplier shall deliver the "Product" and title to the "Product" to the Purchaser on or before the Delivery Date, at the Delivery Address, using any applicable delivery method detailed in the "Annex A", attached to this agreement.\n5. Acceptance\n5.1. Acceptance of Delivery. The Supplier will be deemed to have completed its delivery obligations if\n(a) in the Purchaser\'s opinion, the "Product" satisfies the Acceptance Criteria, and\n(b) the Purchaser notifies the Supplier in writing that it is accepting the "Product".\n5.2. Inspection and Notice. The Purchaser will have 3 Business Days to inspect and evaluate the "Product" on the delivery date before notifying the Supplier that it is either accepting or rejecting the "Product".\n5.3. Acceptance Criteria. The "Acceptance Criteria" are the specifications the "Product" must meet for the Supplier to comply with its requirements and obligations under this agreement, detailed in "Annex B", attached to this agreement.\n6.  Pricing\n6.1.  Product Prices. The initial prices for all Products are set forth in Schedule A. All prices are FOB the Supplier\'s designated shipping point.\n6.2.  Updated Price List. The Supplier shall update its price list each calendar quarter and give Notice of the updated list to the Purchaser no later than 15 days before the end of each calendar quarter.\n7. Purchase Price. The Purchaser shall pay the Purchase Price to the Supplier\n7.1. in full,\n7.2. on delivery and the Purchaser\'s acceptance,\n7.3. in immediately available funds, and\n7.4. To the account the Supplier lists directly below:\nAccount Number: "XXX-XX"\nRouting Number: "YYY-YY"\n8. Term\n8.1. Initial Term. The initial term of this agreement begins on 04/02/2018 and will continue for 2 years, unless terminated earlier (the "Initial Term").\n8.2. Renewal Term by Notice. The Purchaser may renew this agreement for successive renewal terms of 1 years length ("Renewal Terms"), unless terminated earlier, by giving the Supplier notice of the intent to renew this agreement, at least 30 Business Days before the end of the Current Term.\n8.3. Term Definition. "Term" means either the Initial Term or the then-current Renewal Term.\n9. Mutual Representations\n9.1. Authority and Capacity. The parties have the authority and capacity to enter into this agreement.\n9.2. Execution and Delivery. The parties have executed and delivered this agreement.\n9.3. Enforceability. This agreement constitutes a legal, valid, and binding obligation, enforceable against the parties according to its terms.\n9.4. No Conflicts. Neither party is under any restriction or obligation that may affect the performance of its obligations under this agreement.\n10. Limited Warranty\n10.1. Warranty. The Purchaser warrants that the Products\n(a) will be free from material defects, \n(b) are made with workmanlike quality, and \n(c) will conform, within normal commercial tolerances, to the applicable specifications.\n10.2. Replacement Products. Subject to paragraphs 10.3 and 10.4 directly below, the Purchaser\'s sole remedy for breach of this limited warranty will be the Supplier providing the Purchaser with a replacement Product, at the Supplier\'s sole expense.\n10.3. Notice Requirement. The Supplier will only be required to replace Products under paragraph 10.2 if it receives written notice from the Purchaser of such defect or nonconformity within 90 days after delivery of the Products.\n10.4. Exclusions. This warranty does not extend to any Product the Purchaser abuses, neglects, or misuses according to the applicable documentation or specifications, or to any Product the Purchaser has had repaired or altered by a Person other than the Supplier.\n11. Confidentiality\n11.1. Confidentiality Obligation. The receiving party shall hold in confidence all Confidential Information disclosed by the disclosing party to the receiving party.\n11.2. Use Solely for Purpose. A receiving party may only use the Confidential Information according to the terms of this agreement.\n11.3. Non-Disclosure. The Purchaser may not disclose Confidential Information to any third party, except to the extent\n(a) permitted by this agreement,\n(b) the Supplier consents in writing, or\n(c) required by Law.\n11.4. Notice. The Purchaser shall notify the Supplier if it\n(a) is required by Law to disclose any Confidential Information, or\n(b) learns of any unauthorized disclosure of Confidential Information.\n12. Effect of Termination\n12.1. Termination of Obligations. Subject to paragraph 12.2, on termination or expiration of this agreement, each party\'s rights and obligations under this agreement will cease immediately.\n12.2. Payment Obligations. Even after termination or expiration of this agreement, each party shall\n(a) pay any amounts it owes to the other party, including payment obligations for services already rendered, work already performed, goods already delivered, or expenses already incurred, and\n(b) refund any payments received but not yet earned, including payments for services not rendered, work not performed, or goods not delivered, expenses forwarded.\n12.3. No Further Liability. On termination or expiration of this agreement, neither party will be liable to the other party, except for liability\n(a) that arose before the termination or expiration of this agreement, or\n(b) arising after the termination or expiration of this agreement.\n13. Limitation on Liability. Neither party will be liable for breach-of-contract damages that are remote or speculative, or that the breaching party could not reasonably have foreseen on entry into this agreement.\n14. General Provisions\n14.1. Entire Agreement. The parties intend that this agreement, together with all attachments, schedules, exhibits, and other documents that both are referenced in this agreement and refer to this agreement,\n(a) represent the final expression of the parties\' intent relating to the subject matter of this agreement,\n(b)  contain all the terms the parties agreed to relating to the subject matter, and\n(c) replace all of the parties\' previous discussions, understandings, and agreements relating to the subject matter of this agreement.\n14.2. Amendment. This agreement can be amended only by a writing signed by both parties.\n14.3. Assignment. Neither party may assign this agreement or any of their rights or obligations under this agreement without the other party\'s written consent.\n14.4. Notices\n(a) Method of Notice. The parties shall give all notices and communications between the parties in writing by (i) personal delivery, (ii) a nationally-recognized, next-day courier service, (iii) first-class registered or certified mail, postage prepaid, (iv) fax, or (v) electronic mail to the party\'s address specified in this agreement, or to the address that a party has notified to be that party\'s address for the purposes of this section.\n(b) Receipt of Notice. A notice given under this agreement will be effective on\n(i) the other party\'s receipt of it, or\n(ii) if mailed, the earlier of the other party\'s receipt of it and the fifth business day after mailing it. \n14.5. Severability. If any part of this agreement is declared unenforceable or invalid, the remainder will continue to be valid and enforceable.\n14.6. Waiver\n(a) Affirmative Waivers. Neither party\'s failure or neglect to enforce any rights under this agreement will be deemed to be a waiver of that party\'s rights.\n(b) Written Waivers. A waiver or extension is only effective if it is in writing and signed by the party granting it.\n(c) No General Waivers. A party\'s failure or neglect to enforce any of its rights under this agreement will not be deemed to be a waiver of that or any other of its rights.\n(d) No Course of Dealing. No single or partial exercise of any right or remedy will preclude any other or further exercise of any right or remedy.\n14.7. Governing Law and Consent to Jurisdiction and Venue\n(a) Governing Law. This agreement, and any dispute arising out of the subject matter of the agreement, shall be governed by the laws of the State of NY.\n(b) Consent to Jurisdiction. Each party hereby irrevocably consents to the non-exclusive jurisdiction and venue of any state or federal court located within the State of NY, in connection with any matter arising out of this agreement or the transactions contemplated under this agreement.\n(c) Consent to Service. Each party hereby irrevocably\n(i) agrees that process may be served on it in any manner authorized by the Laws of the State of NY, and\n(ii) waives any objection which it might otherwise have to service of process under the Laws of the State of NY.\n14.8. Counterparts\n(a) Signed in Counterparts. This agreement may be signed in any number of counterparts.\n(b) All Counterparts Original. Each counterpart is an original.\n(c) Counterparts Form One Document. Together, all counterparts form one single document.\nSchedule A.\n[{shipment}] [{unitPrice}] USD per [{unit}]\nAnnex A. Delivery Method\nShipping containers used must be temperature and humidity controlled, and sensor readings must be logged at least [{sensorReadingFrequency}] per [{duration}].\nAnnex B. Acceptance Criteria\nThe shipment must contain between [{minUnits}] and [{maxUnits}] [{unit}] of [{product}].\nTemperature readings for the shipment must be between [{minTemperature}]°C and [{maxTemperature}]°C.\nHumidity readings for the shipment must be between [{minHumidity}]% and [{maxHumidity}]%.\nShipments that have a temperature or humidity reading outside the agreed range have a price penalty applied calculated using the Formula for Breach Penalty Calculation below. The breach penalty factor to be used is [{penaltyFactor}].\nFormula for Breach Penalty Calculation:\n   penalty = number of shipment units x difference between sensor reading and agreed range x breach penalty factor\n',
    'request': '{\n    "$class":"org.accordproject.perishablegoods.ShipmentReceived",\n    "unitCount":3002,\n    "shipment":{\n        "$class":"org.accordproject.perishablegoods.Shipment",\n        "shipmentId":"SHIP_001",\n        "sensorReadings":[\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":2,\n                "humidity":80,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"a"\n            }\n        ]\n    }\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'SupplyAgreement'
  },
  {
    'name': 'Volumediscount',
    'ergo': '\nnamespace org.accordproject.volumediscount\nimport org.accordproject.volumediscount.*\ncontract VolumeDiscount over TemplateModel {\n   // Clause for volume discount\n   clause volumediscount(request : VolumeDiscountRequest) : VolumeDiscountResponse {\n    if request.netAnnualChargeVolume < contract.firstVolume\n    then return new VolumeDiscountResponse{ discountRate: contract.firstRate }\n    else if request.netAnnualChargeVolume < contract.secondVolume\n    then return new VolumeDiscountResponse{ discountRate: contract.secondRate }\n    else return new VolumeDiscountResponse{ discountRate: contract.thirdRate }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.volumediscount\n\n@AccordTemplateModel("volumediscount")\nconcept TemplateModel {\n  \n  o Double firstVolume\n  \n  o Double secondVolume\n  \n  o Double firstRate\n  \n  o Double secondRate\n  \n  o Double thirdRate\n}\n\ntransaction VolumeDiscountRequest {\n  \n  o Double netAnnualChargeVolume\n}\n\ntransaction VolumeDiscountResponse {\n  \n  o Double discountRate\n}'
      ],
    'contract': '{"$class":"org.accordproject.volumediscount.TemplateModel","firstVolume":1,"secondVolume":10,"firstRate":3,"secondRate":2.9,"thirdRate":2.8}',
    'grammar': 'Volume-Based Card Acceptance Agreement [Abbreviated]\nThis Agreement is by and between Card, Inc., a New York corporation, and you, the Merchant. By accepting the Card, you agree to be bound by the Agreement. \nDiscount means an amount that we charge you for accepting the Card, which amount is: \n(i) a percentage (Discount Rate) of the face amount of the Charge that you submit, or a flat per-\nTransaction fee, or a combination of both; and/or \n(ii) a Monthly Flat Fee (if you meet our requirements).\nTransaction Processing and Payments. Our Card acceptance, processing, and payment requirements are set forth in the Merchant Regulations. Some requirements are summarized here for ease of reference, but do not supersede the provisions in the Merchant Regulations.\nPayment for Charges. We will pay you, through our agent, according to your payment plan in US dollars for the face amount of Charges submitted from your Establishments less all applicable deductions, rejections, and withholdings, which include: \n(i) the Discount, \n(ii) any amounts you owe us or our Affiliates, \n(iii) any amounts for which we have Chargebacks and \n(iv) any Credits you submit. Your initial Discount is indicated in the Agreement or otherwise provided to you in writing by us. In addition to your Discount we may charge you additional fees and assessments, as listed in the Merchant Regulations or as otherwise provided to you in writing by us. We may adjust any of these amounts and may change any other amount we charge you for accepting the Card.\nSETTLEMENT\na) Settlement Amount. Our agent will pay you according to your payment plan, as described below, in US dollars for the face amount of Charges submitted from your Establishments less all applicable deductions, rejections, and withholdings, which include: \n    (i) the Discount, \n    (ii) any amounts you owe us or our Affiliates, \n    (iii) any amounts for which we have Chargebacks, and (iv) any Credits you submit. Our agent will subtract the full amount of all applicable deductions, rejections, and withholdings, from this payment to you (or debit your Bank Account), but if it cannot, then you must pay it promptly upon demand.\nb) Discount. The Discount is determined according to the following table:\n| Annual Dollar Volume      | Discount             |\n| Less than $[{firstVolume}] million      | [{firstRate}]%                |\n| $[{firstVolume}] million to $[{secondVolume}] million | [{secondRate}]%                |\n| Greater than $[{secondVolume}] million  | [{thirdRate}]%                |\n_______________________					_____________________\n Card, Inc.								Merchant',
    'request': '{\n    "$class": "org.accordproject.volumediscount.VolumeDiscountRequest",\n    "netAnnualChargeVolume": 0.4\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'VolumeDiscount'
  }
];
//console.log(JSON.stringify(examples));
