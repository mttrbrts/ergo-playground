let examples =[
  {
    'name': 'AcceptanceOfDelivery',
    'ergo': 'namespace org.accordproject.acceptanceofdelivery\nimport org.accordproject.common.*\nimport org.accordproject.acceptanceofdelivery.*\ncontract AcceptanceOfDelivery over TemplateModel {\n  clause acceptanceofdelivery(request : InspectDeliverable) : InspectionResponse throws Error {\n    define variable received = request.deliverableReceivedAt;\n    enforce momentIsBefore(received,now()) else\n      throw new Error{ error : "Transaction time is before the deliverable date." }\n    ;\n    define variable status =\n      if momentIsAfter(now(), momentAdd(received, momentDuration(contract.businessDays, "day")))\n      then "OUTSIDE_INSPECTION_PERIOD"\n      else if request.inspectionPassed\n      then "PASSED_TESTING"\n      else "FAILED_TESTING"\n    ;\n    return new InspectionResponse{\n      status : status,\n      shipper : contract.shipper,   // This should be a relationship\n      receiver : contract.receiver  // This should be a relationship\n    }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.acceptanceofdelivery\nimport org.hyperledger.composer.system.*\n\ntransaction InspectDeliverable {\n  o DateTime deliverableReceivedAt\n  o Boolean inspectionPassed\n}\n\nenum InspectionStatus {\n  o PASSED_TESTING\n  o FAILED_TESTING\n  o OUTSIDE_INSPECTION_PERIOD\n}\n\ntransaction InspectionResponse {\n  o InspectionStatus status\n  --> Participant shipper\n  --> Participant receiver\n}\n\n@AccordTemplateModel("acceptance-of-delivery")\nconcept TemplateModel {\n  \n  --> Participant shipper\n  \n  --> Participant receiver\n  \n  o String deliverable\n  \n  o Long businessDays\n  \n  o String attachment\n}'
      ],
    'contract': '{"$class":"org.accordproject.acceptanceofdelivery.TemplateModel","shipper":"Party A","receiver":"Party B","deliverable":"Widgets","businessDays":10,"attachment":"Attachment X"}',
    'request': '{\n    "$class":"org.accordproject.acceptanceofdelivery.InspectDeliverable",\n    "deliverableReceivedAt": "January 1, 2018 16:34:00",\n    "inspectionPassed": true\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'AcceptanceOfDelivery'
  },
  {
    'name': 'CopyrightLicense',
    'ergo': 'namespace org.accordproject.copyrightlicense\nimport org.accordproject.copyrightlicense.*\ncontract CopyrightLicense over TemplateModel {\n   // Clause for volume discount\n  clause paymentClause(request : PaymentRequest) : PayOut {\n	  return new PayOut{ amount: clause.amount }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.copyrightlicense\nimport org.accordproject.common.ClauseModel\n\ntransaction PaymentRequest {\n}\n\ntransaction PayOut {\n  o Double amount\n}\n\n@AccordTemplateModel("copyright-license")\nconcept TemplateModel {\n  \n  o DateTime effectiveDate\n  \n  o String licenseeName\n  o String licenseeState\n  o String licenseeEntityType\n  o String licenseeAddress\n  \n  o String licensorName\n  o String licensorState\n  o String licensorEntityType\n  o String licensorAddress\n  \n  o String territory\n  \n  o String purposeDescription\n  o String workDescription\n  \n  o PaymentClauseModel paymentClause\n}\nasset PaymentClauseModel extends ClauseModel {\n  o String amountText\n	o Double amount\n	o String paymentProcedure\n}'
      ],
    'contract': '{"$class":"org.accordproject.copyrightlicense.TemplateModel","effectiveDate":"2018-01-01","licenseeName":"Me","licenseeState":"NY","licenseeEntityType":"Company","licenseeAddress":"1 Broadway","licensorName":"Myself","licensorState":"NY","licensorEntityType":"Company","licensorAddress":"2 Broadway","territory":"United States","purposeDescription":"stuff","workDescription":"other stuff","paymentClause":{"$class":"org.accordproject.copyrightlicense.PaymentClauseModel","clauseId":"e1efc58a-fd54-4ca3-a4a0-9f2e49292a73","amountText":"one hundred","amount":100,"paymentProcedure":"bank transfer"}}',
    'request': '{\n    "$class":"org.accordproject.copyrightlicense.PaymentRequest"\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'CopyrightLicense'
  },
  {
    'name': 'DemandForecast',
    'ergo': 'namespace org.accordproject.demandforecast\nimport org.accordproject.demandforecast.*\ndefine function isLastDayOfQuarter(timestamp : DateTime) : Boolean {\n    // Keep always true for testing\n    return true\n}\ncontract DemandForecast over TemplateModel {\n	clause demandforecast(request : ForecastRequest) : BindingResponse {\n//    enforce momentIsBefore(contract.effectiveDate,now())\n//		else throw new Error{ message: "Forecast was received before the effective date" };\n    enforce isLastDayOfQuarter(now())\n		else throw new Error{ message: "Forecast was not received on last day of quarter" };\n    \n	  return new BindingResponse{\n			requiredPurchase : request.supplyForecast * (contract.minimumPercentage / 100.0),\n			year : momentYear(now()),\n			quarter : momentQuarter(now())\n		}\n	}\n}\n',
    'models':  [
      'namespace org.accordproject.demandforecast\n@AccordTemplateModel("demandforecast")\nconcept TemplateModel {\n  o String purchaser\n  o String supplier \n  o DateTime effectiveDate\n  o Double minimumPercentage\n}\n\ntransaction ForecastRequest {\n  o Integer supplyForecast\n}\ntransaction BindingResponse {\n  o Double requiredPurchase\n  o Integer year\n  o Integer quarter\n}\n'
      ],
    'contract': '{"$class":"org.accordproject.demandforecast.TemplateModel","purchaser":"PETER","supplier":"DAN","effectiveDate":"2018-04-02","minimumPercentage":85}',
    'request': '{\n    "$class": "org.accordproject.demandforecast.ForecastRequest",\n    "supplyForecast": 1200.0\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'DemandForecast'
  },
  {
    'name': 'HelloWorld',
    'ergo': 'namespace org.accordproject.helloworld\ncontract HelloWorld over TemplateModel {\n  // Simple Clause\n  clause helloworld(request : Request) : Response {\n    return new Response{ output: "Hello " ++ contract.name ++ " " ++ request.input }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.helloworld\ntransaction Request {\n  o String input\n}\ntransaction Response {\n  o String output\n}\n\n@AccordTemplateModel("helloworld")\nconcept TemplateModel {\n  \n  o String name\n}\n// this is a change!'
      ],
    'contract': '{"$class":"org.accordproject.helloworld.TemplateModel","name":"Fred Blogs"}',
    'request': '{\n    "$class": "org.accordproject.helloworld.Request",\n    "input": "Accord Project"\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'HelloWorld'
  },
  {
    'name': 'HelloWorldState',
    'ergo': 'namespace org.accordproject.helloworldstate\nimport org.accordproject.helloworldstate.*\ncontract HelloWorldState over TemplateModel {\n  // Simple Clause\n  clause helloworldstate(request : Request) : Response {\n		set state new HelloWorldState{\n			stateId: "org.accordproject.helloworldstate.HelloWorldState#" ++ state.counter,\n			counter: state.counter + 1.0\n		};\n    return new Response{\n			output: "Hello " ++ contract.name ++ " " ++ request.input ++ "(" ++ state.counter ++ ")"\n		}\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.helloworldstate\nimport org.accordproject.common.*\ntransaction Request {\n  o String input\n}\ntransaction Response {\n  o String output\n}\nasset HelloWorldState extends ContractState {\n  o Double counter\n}\n\n@AccordTemplateModel("helloworldstate")\nconcept TemplateModel {\n  \n  o String name\n}\n// this is a change!'
      ],
    'contract': '{"$class":"org.accordproject.helloworldstate.TemplateModel","name":"Fred Blogs"}',
    'request': '{\n    "$class": "org.accordproject.helloworldstate.Request",\n    "input": "Accord Project"\n}\n',
    'state': '{\n    "$class": "org.accordproject.helloworldstate.HelloWorldState",\n    "stateId": "org.accordproject.helloworldstate.HelloWorldState#0",\n		"counter" : 0\n}\n',
    'contractname': 'HelloWorldState'
  },
  {
    'name': 'InstallmentSale',
    'ergo': 'namespace org.accordproject.installmentsale\ncontract InstallmentSale over TemplateModel {\n  clause PayInstallment(request : Installment) : Balance {\n    enforce (state.status = "WaitingForFirstDayOfNextMonth"); // Make sure this is only called in the right state\n    enforce (contract.MIN_PAYMENT <= state.balance_remaining) and (state.next_payment_month < 23);\n    enforce (contract.MIN_PAYMENT <= request.amount); // Underpaying is forbidden\n    enforce (request.amount <= state.balance_remaining); // overpaying is forbidden. this is NOT checked statically.\n    define variable before_interest = state.balance_remaining - request.amount;\n    define variable balance = before_interest * (1.0 + contract.INTEREST_RATE/100.00);\n		define variable total_paid = state.total_paid + request.amount;\n    set state new InstallmentSaleState{\n			stateId: "1",\n      status: "WaitingForFirstDayOfNextMonth",\n      balance_remaining: balance,\n			total_paid: total_paid,\n      next_payment_month: state.next_payment_month + 1.0\n    };\n		emit new PaymentObligation{\n			from: contract.BUYER,\n			to: contract.SELLER,\n			amount: request.amount\n		};\n    return new Balance{\n      balance: balance,\n			total_paid: total_paid\n    }\n  }\n  clause PayLastInstallment(request : ClosingPayment) : Balance {\n    enforce (request.amount = state.balance_remaining + contract.DUE_AT_CLOSING);\n    define variable balance = state.balance_remaining + contract.DUE_AT_CLOSING - request.amount;\n		define variable total_paid = state.total_paid + request.amount;\n    set state new InstallmentSaleState{\n			stateId: "1",\n      status: "Fulfilled",\n      balance_remaining: balance,\n			total_paid: total_paid,\n      next_payment_month: 0.0 // ???\n    };\n		emit new PaymentObligation{\n			from: contract.BUYER,\n			to: contract.SELLER,\n			amount: request.amount\n		};\n    return new Balance{\n      balance: balance,\n			total_paid: total_paid\n    }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.installmentsale\nimport org.accordproject.common.*\ntransaction Installment {\n  o Double amount\n}\ntransaction ClosingPayment {\n  o Double amount\n}\ntransaction Balance {\n  o Double balance\n	o Double total_paid\n}\nenum ContractStatus {\n  o WaitingForFirstDayOfNextMonth\n  o Fulfilled\n}\nasset InstallmentSaleState extends ContractState {\n  o ContractStatus status\n  o Double balance_remaining\n  o Integer next_payment_month\n	o Double total_paid\n}\nevent PaymentObligation {\n  o String from\n	o String to\n	o Double amount\n}\n\n@AccordTemplateModel("installment-sale")\nconcept TemplateModel {\n  o String BUYER\n	o String SELLER\n  o Double INITIAL_DUE\n  o Double INTEREST_RATE\n  o Double TOTAL_DUE_BEFORE_CLOSING\n  o Double MIN_PAYMENT\n  o Double DUE_AT_CLOSING\n}\n'
      ],
    'contract': '{"$class":"org.accordproject.installmentsale.TemplateModel","BUYER":"Dan","SELLER":"Ned","INITIAL_DUE":10000,"INTEREST_RATE":1.5,"TOTAL_DUE_BEFORE_CLOSING":9500,"MIN_PAYMENT":500,"DUE_AT_CLOSING":500}',
    'request': '{\n    "$class": "org.accordproject.installmentsale.Installment",\n    "amount": 2500.00\n}',
    'state': '{ "$class": "org.accordproject.installmentsale.InstallmentSaleState",\n  "stateId" : "org.accordproject.installmentsale.InstallmentSaleState#1",\n  "status" : "WaitingForFirstDayOfNextMonth",\n  "balance_remaining" : 10000.00,\n	"total_paid" : 0.00,\n  "next_payment_month" : 3 }\n',
    'contractname': 'InstallmentSale'
  },
  {
    'name': 'LateDeliveryAndPenalty',
    'ergo': 'namespace org.accordproject.latedeliveryandpenalty\nimport org.accordproject.common.*\nimport org.accordproject.latedeliveryandpenalty.*\n// Declare a contract over a template model\ncontract LateDeliveryAndPenalty over TemplateModel {\n  // Clause checking for late delivery and calculating penalty\n  clause latedeliveryandpenalty(request : LateDeliveryAndPenaltyRequest) : LateDeliveryAndPenaltyResponse throws Error {\n    // Guard against calling late delivery clause too early\n    define variable agreed = request.agreedDelivery;\n    enforce momentIsBefore(agreed,now()) else\n    throw new Error{ message : "Cannot exercise late delivery before delivery date" }\n    ;\n    // Guard against force majeure\n    enforce !contract.forceMajeure or !request.forceMajeure else\n    return new LateDeliveryAndPenaltyResponse{\n      penalty: 0.0,\n      buyerMayTerminate: true\n    }\n    ;\n    // Calculate the time difference between current date and agreed upon date\n    define variable diff = momentDiff(now,agreed);\n    // Penalty formula\n    define variable penalty =\n      (diff / contract.penaltyDuration.amount) * contract.penaltyPercentage/100.0 * request.goodsValue;\n    // Penalty may be capped\n    define variable capped = min([penalty, contract.capPercentage/100.0 * request.goodsValue]);\n    // Return the response with the penalty and termination determination\n    return new LateDeliveryAndPenaltyResponse{\n      penalty: capped,\n      buyerMayTerminate: diff > contract.termination.amount\n    }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.base\n\nenum TemporalUnit {\n  o SECOND\n  o MINUTE\n  o HOUR\n  o DAY\n  o WEEK\n  o YEAR\n}\n\nconcept Duration {\n  o Long amount\n  o TemporalUnit unit\n}',
      'namespace org.accordproject.latedeliveryandpenalty\nimport org.accordproject.base.*\n\n@AccordTemplateModel("latedeliveryandpenalty")\nconcept TemplateModel {\n  \n  o Boolean forceMajeure optional\n  \n  o Duration penaltyDuration\n  \n  o Double penaltyPercentage\n  \n  o Double capPercentage\n  \n  o Duration termination\n  \n  o TemporalUnit fractionalPart\n}\n\ntransaction LateDeliveryAndPenaltyRequest {\n  \n  o Boolean forceMajeure\n  \n  o DateTime agreedDelivery\n  \n  o DateTime deliveredAt optional\n  \n  o Double goodsValue\n}\n\ntransaction LateDeliveryAndPenaltyResponse {\n  \n  o Double penalty\n  \n  o Boolean buyerMayTerminate\n}'
      ],
    'contract': '{"$class":"org.accordproject.latedeliveryandpenalty.TemplateModel","forceMajeure":true,"penaltyDuration":{"$class":"org.accordproject.base.Duration","amount":2,"unit":"DAY"},"penaltyPercentage":10.5,"capPercentage":55,"termination":{"$class":"org.accordproject.base.Duration","amount":15,"unit":"DAY"},"fractionalPart":"DAY"}',
    'request': '{\n    "$class": "org.accordproject.latedeliveryandpenalty.LateDeliveryAndPenaltyRequest",\n    "forceMajeure": false,\n    "agreedDelivery": "December 17, 2017 03:24:00",\n    "deliveredAt": null,\n    "goodsValue": 200.00\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'LateDeliveryAndPenalty'
  },
  {
    'name': 'PerishableGoods',
    'ergo': 'namespace org.accordproject.perishablegoods\nimport org.accordproject.common.*\nimport org.accordproject.perishablegoods.*\n// Auxiliary function calculating penalty from temperature readings\ndefine function calculateTempPenalty(minTemperature : Double,\n                                     maxTemperature : Double,\n                                     penaltyFactor : Double,\n                                     readings : sensorReading[]) : Double {\n  define variable tempReadings = foreach x in readings return x.centigrade;\n  // find the lowest temperature reading\n  define variable lowestReading = min(tempReadings);\n  // find the highest temperature reading\n  define variable highestReading = max(tempReadings);\n  if lowestReading < minTemperature\n  then return (minTemperature - lowestReading) * penaltyFactor\n  else if highestReading > maxTemperature\n  then return (highestReading - maxTemperature) * penaltyFactor\n  else return 0.0\n}\n// Auxiliary function calculating penalty from humidity readings\ndefine function calculateHumPenalty(minHumidity : Double,\n                                    maxHumidity : Double,\n                                    penaltyFactor : Double,\n                                    readings : sensorReading[]) : Double {\n  define variable humReadings = foreach x in readings return x.humidity;\n  // find the lowest humidity reading\n  define variable lowestReading = min(humReadings);\n  // find the highest temperature reading\n  define variable highestReading = max(humReadings);\n  if lowestReading < minHumidity\n  then return (minHumidity - lowestReading) * penaltyFactor\n  else if highestReading > maxHumidity\n  then return (highestReading - maxHumidity) * penaltyFactor\n  else return 0.0\n}\ncontract PerishableGoods over TemplateModel {\n  clause payout(request : ShipmentReceived) : PriceCalculation throws Error {\n    // Guard against unitCount outside the bounds specified in the clause\n    //enforce request.unitCount < contract.minUnits or request.unitCount > contract.maxUnits\n    //else throw new Error{ message : "Units received out of range for the contract." };\n    // Guard against requests for payout after the dueDate\n    enforce momentIsAfter(request.timestamp,contract.dueDate)\n    else return new PriceCalculation{\n      shipment : request.shipment,\n			totalPrice : 0.0,\n			penalty : 0.0,\n			late : true\n    };\n    // Guard against missing temperature readings\n    enforce count(request.shipment.sensorReadings) > 0.0\n    else throw new Error{ message : "No temperature readings received."};\n    // Calculates payout\n    define variable payOut = contract.unitPrice * request.unitCount;\n    // Calculates penalty if any\n    define variable penalty =\n      calculateTempPenalty(contract.minTemperature,\n                           contract.maxTemperature,\n                           contract.penaltyFactor,\n                           request.shipment.sensorReadings)\n    + calculateHumPenalty(contract.minHumidity,\n                          contract.maxHumidity,\n                          contract.penaltyFactor,\n                          request.shipment.sensorReadings);\n    // Returns a Price calculation, applying any penalities\n    define variable totalPenalty = penalty * request.unitCount;\n    return new PriceCalculation{\n      shipment : request.shipment,\n      totalPrice : max([payOut - totalPenalty, 0.0]),\n      penalty : totalPenalty,\n      late : false\n    }\n  }\n}\n',
    'models':  [
      '\nnamespace org.accordproject.perishablegoods\n\nenum ShipmentStatus {\n  o CREATED\n  o IN_TRANSIT\n  o ARRIVED\n}\nenum Unit {\n  o KG\n  o BUSHEL\n  o TONNE\n  o BARREL\n  o CORD\n}\nenum Duration {\n  o WEEK\n  o HOUR\n  o DAY\n  o MONTH\n  o YEAR\n  o MINUTE\n}\n\nabstract transaction ShipmentTransaction {\n    --> Shipment shipment\n}\n\ntransaction SensorReading extends ShipmentTransaction {\n  o Double centigrade\n  o Double humidity\n}\n\ntransaction ShipmentReceived extends ShipmentTransaction {\n    o Integer unitCount\n}\n\ntransaction PriceCalculation extends ShipmentTransaction {\n  o Double totalPrice\n  o Double penalty\n  o Boolean late\n}\n\nasset Shipment identified by shipmentId {\n  o String shipmentId\n  o ShipmentStatus status\n  --> Grower grower\n  --> Importer importer\n  o SensorReading[] sensorReadings optional\n  \n  o String smartClause\n}\n\nconcept Address {\n  o String city optional\n  o String country\n  o String street optional\n  o String zip optional\n}\n\nabstract participant Business identified by email {\n  o String email\n  o Address address\n  o Double accountBalance\n}\n\nparticipant Grower extends Business {\n}\n\nparticipant Shipper extends Business {\n}\n\nparticipant Importer extends Business {\n}\n\ntransaction SetupDemo {\n}'
      ],
    'contract': '{"$class":"org.accordproject.perishablegoods.contract.TemplateModel","grower":"PETER","importer":"DAN","shipment":"SHIP_001","dueDate":"2018-04-02","unitPrice":1.5,"unit":"KG","minUnits":3000,"maxUnits":3500,"product":"Grade I, Size 4, Zutano Mexican Avocados","sensorReadingFrequency":1,"duration":"HOUR","minTemperature":2,"maxTemperature":13,"minHumidity":70,"maxHumidity":90,"penaltyFactor":0.2}',
    'request': '{\n    "$class":"org.accordproject.perishablegoods.ShipmentReceived",\n    "unitCount":3000,\n    "shipment":{\n        "$class":"org.accordproject.perishablegoods.Shipment",\n        "shipmentId":"SHIP_001",\n        "sensorReadings":[\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":2,\n                "humidity":80,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"a"\n            },\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":5,\n                "humidity":90,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"b"\n            },\n            {\n                "$class":"org.accordproject.perishablegoods.SensorReading",\n                "centigrade":15,\n                "humidity":65,\n                "shipment":"resource:org.accordproject.perishablegoods.Shipment#SHIP_001",\n                "transactionId":"c"\n            }\n        ]\n    },\n    "transactionId":"99c64b8a-b3b0-408a-8ec4-7820776cd447",\n    "timestamp":"2018-02-18T11:11:41.264Z"\n}',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'PerishableGoods'
  },
  {
    'name': 'Volumediscount',
    'ergo': 'namespace org.accordproject.volumediscount\nimport org.accordproject.volumediscount.*\ncontract VolumeDiscount over TemplateModel {\n   // Clause for volume discount\n   clause volumediscount(request : VolumeDiscountRequest) : VolumeDiscountResponse {\n    if request.netAnnualChargeVolume < contract.firstVolume\n    then return new VolumeDiscountResponse{ discountRate: contract.firstRate }\n    else if request.netAnnualChargeVolume < contract.secondVolume\n    then return new VolumeDiscountResponse{ discountRate: contract.secondRate }\n    else return new VolumeDiscountResponse{ discountRate: contract.thirdRate }\n  }\n}\n',
    'models':  [
      'namespace org.accordproject.volumediscount\n\n@AccordTemplateModel("volumediscount")\nconcept TemplateModel {\n  \n  o Double firstVolume\n  \n  o Double secondVolume\n  \n  o Double firstRate\n  \n  o Double secondRate\n  \n  o Double thirdRate\n}\n\ntransaction VolumeDiscountRequest {\n  \n  o Double netAnnualChargeVolume\n}\n\ntransaction VolumeDiscountResponse {\n  \n  o Double discountRate\n}'
      ],
    'contract': '{"$class":"org.accordproject.volumediscount.TemplateModel","firstVolume":1,"secondVolume":10,"firstRate":3,"secondRate":2.9,"thirdRate":2.8}',
    'request': '{\n    "$class": "org.accordproject.volumediscount.VolumeDiscountRequest",\n    "netAnnualChargeVolume": 0.4\n}\n',
    'state': '{\n    "$class": "org.accordproject.common.ContractState",\n    "stateId": "org.accordproject.common.ContractState#1"\n}\n',
    'contractname': 'VolumeDiscount'
  }
];
//console.log(JSON.stringify(examples));
